# コマンド簡略化
alias la='ls -A'
alias la='ls -a'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ga='git add'
alias gd='git diff'
alias gs='git status'
alias gp='git push'
alias gpo='git push -u origin'
alias gb='git branch'
alias gbd='git branch -d'
alias gco='git checkout'
alias gf='git fetch'
alias gc='git commit'
alias gl='git log --graph'
alias glo='git log --oneline'
alias gpl='git pull'
alias gcm='git commit -m'

alias viz='vi ~/.zshrc'
alias sz='source ~/.zshrc'
alias osim='open -a Simulator'

# 安全のため
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'


# gitignore生成
alias ignoreios='gibo dump Swift Xcode macOS >> .gitignore'

# Xcode
alias cleanios='rm -rf ~/Library/Developer/CoreSimulator/Caches/dyld'

alias clean='rm -rf ~/Library/Developer/Xcode/DerivedData'


# GHQ
## ghqとの連携。ghqの管理化にあるリポジトリを一覧表示する。ctrl - ]にバインド。
function peco-src () {
  local selected_dir=$(ghq list -p | peco --prompt="repositories >" --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco-src
bindkey '^]' peco-src


# ghqのリスト表示
alias g='cd $(ghq root)/$(ghq list | peco)'

# ghqでリストを表示し、ブラウザを起動する
alias gh='hub browse $(ghq list | peco | cut -d "/" -f 2,3)'


# 競プロ用
alias rn='sh script.sh'
# ↓ #include <assert.h>でエラーが起きる対応
# Xcodeのアップデートに伴ってヘッダーファイル等の参照すべきフォルダが変わったため
export SDKROOT="$(xcrun --sdk macosx --show-sdk-path)"


# Python
alias python=python3
# pip
export PATH=$PATH:/Users/akidon/Library/Python/3.9/bin

# Prezto用
#if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
#  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
#fi


# Flutter
export PATH="$PATH:/usr/local/Caskroom/flutter/3.16.0/flutter/bin/cache/dart-sdk"
export PATH="$PATH":"$HOME/.pub-cache/bin"


# ターミナルのタイトルについて、ディレクトリパスを表示
# echo -ne "\033]0;$(pwd | rev | awk -F \/ '{print "/"$1"/"$2}'| rev)\007"
# function chpwd() { echo -ne "\033]0;$(pwd | rev | awk -F \/ '{print "/"$1"/"$2}'| rev)\007"}


### -----Zinit'sの設定-----
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# シンタックスハイライト
zinit light zsh-users/zsh-syntax-highlighting

#入力補完
zinit light zsh-users/zsh-autosuggestions
### -----Zinit'sの設定チャンク終了-----

# 補完機能を有効にする
autoload -Uz compinit
compinit -u
if [ -e /usr/local/share/zsh-completions ]; then
  fpath=(/usr/local/share/zsh-completions $fpath)
fi

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# 補完候補を詰めて表示
setopt list_packed

# 補完候補一覧をカラー表示
autoload colors
zstyle ':completion:*' list-colors ''

# コマンドのスペルを訂正
setopt correct

# ライブラリStarshipの初期化
# 初めて使う場合はbrew install starshipを打ち込んでね
eval "$(starship init zsh)"

# rbenv
rbenv init
eval "$(rbenv init - zsh)"
alias rbenvv='rbenv versions'
